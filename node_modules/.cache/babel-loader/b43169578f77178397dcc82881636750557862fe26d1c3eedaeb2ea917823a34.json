{"ast":null,"code":"var _jsxFileName = \"/Users/yangxiwei/Desktop/Learn_Log/src/Components/Logs/Logs.js\",\n  _s = $RefreshSig$();\n/* 日志的容器 */\nimport LogItem from \"./LogItem/LogItem\";\nimport Card from \"../UI/Card/Card\";\nimport './Logs.css';\nimport LogFilter from \"./LogFilter/LogFilter\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logs = props => {\n  _s();\n  // 创建一个存储年份的state\n  const [year, setYear] = useState(2022);\n\n  // 过滤数据，只显示某一年的数据\n  let filterData = props.logsData.filter(item => item.date.getFullYear() === year);\n\n  // 创建一个修改年份的函数\n  const changeYearHandler = year => {\n    setYear(year);\n  };\n\n  // 将数据放入JSX中\n  let logItemData = filterData.map((item, index) => /*#__PURE__*/_jsxDEV(LogItem, {\n    onDelLog: () => props.onDelLog(item.id),\n    date: item.date,\n    desc: item.desc,\n    time: item.time\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 26\n  }, this));\n  if (logItemData.length === 0) {\n    logItemData = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-logs\",\n      children: \"\\u6CA1\\u8981\\u627E\\u5230\\u65E5\\u5FD7\\uFF01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"logs\",\n    children: [/*#__PURE__*/_jsxDEV(LogFilter, {\n      year: year,\n      onYearChange: changeYearHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), logItemData]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, this);\n};\n_s(Logs, \"4MfM5/iBswbrArCeWCUMQASJEwQ=\");\n_c = Logs;\nexport default Logs;\nvar _c;\n$RefreshReg$(_c, \"Logs\");","map":{"version":3,"names":["LogItem","Card","LogFilter","useState","jsxDEV","_jsxDEV","Logs","props","_s","year","setYear","filterData","logsData","filter","item","date","getFullYear","changeYearHandler","logItemData","map","index","onDelLog","id","desc","time","fileName","_jsxFileName","lineNumber","columnNumber","length","className","children","onYearChange","_c","$RefreshReg$"],"sources":["/Users/yangxiwei/Desktop/Learn_Log/src/Components/Logs/Logs.js"],"sourcesContent":["/* 日志的容器 */\nimport LogItem from \"./LogItem/LogItem\";\nimport Card from \"../UI/Card/Card\";\nimport './Logs.css';\nimport LogFilter from \"./LogFilter/LogFilter\";\nimport {useState} from \"react\";\n\nconst Logs = (props) => {\n\n    // 创建一个存储年份的state\n    const [year, setYear] = useState(2022);\n\n    // 过滤数据，只显示某一年的数据\n    let filterData = props.logsData.filter(item => item.date.getFullYear() === year);\n\n    // 创建一个修改年份的函数\n    const changeYearHandler = (year) => {\n        setYear(year);\n    };\n\n\n    // 将数据放入JSX中\n    let logItemData = filterData.map(\n        (item, index) => <LogItem\n            onDelLog={() => props.onDelLog(item.id)}\n            key={item.id}\n            date={item.date}\n            desc={item.desc}\n            time={item.time}/>\n    );\n\n    if (logItemData.length === 0) {\n        logItemData = <p className=\"no-logs\">没要找到日志！</p>;\n    }\n\n    return <Card className=\"logs\">\n        {/*引入年份的选择组件*/}\n        <LogFilter\n            year={year}\n            onYearChange={changeYearHandler}\n        />\n        {logItemData}\n    </Card>\n};\n\nexport default Logs;"],"mappings":";;AAAA;AACA,OAAOA,OAAO,MAAM,mBAAmB;AACvC,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAO,YAAY;AACnB,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAEpB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,IAAIQ,UAAU,GAAGJ,KAAK,CAACK,QAAQ,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKP,IAAI,CAAC;;EAEhF;EACA,MAAMQ,iBAAiB,GAAIR,IAAI,IAAK;IAChCC,OAAO,CAACD,IAAI,CAAC;EACjB,CAAC;;EAGD;EACA,IAAIS,WAAW,GAAGP,UAAU,CAACQ,GAAG,CAC5B,CAACL,IAAI,EAAEM,KAAK,kBAAKf,OAAA,CAACL,OAAO;IACrBqB,QAAQ,EAAEA,CAAA,KAAMd,KAAK,CAACc,QAAQ,CAACP,IAAI,CAACQ,EAAE,CAAE;IAExCP,IAAI,EAAED,IAAI,CAACC,IAAK;IAChBQ,IAAI,EAAET,IAAI,CAACS,IAAK;IAChBC,IAAI,EAAEV,IAAI,CAACU;EAAK,GAHXV,IAAI,CAACQ,EAAE;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGK,CACzB,CAAC;EAED,IAAIV,WAAW,CAACW,MAAM,KAAK,CAAC,EAAE;IAC1BX,WAAW,gBAAGb,OAAA;MAAGyB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAO;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACpD;EAEA,oBAAOvB,OAAA,CAACJ,IAAI;IAAC6B,SAAS,EAAC,MAAM;IAAAC,QAAA,gBAEzB1B,OAAA,CAACH,SAAS;MACNO,IAAI,EAAEA,IAAK;MACXuB,YAAY,EAAEf;IAAkB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,EACDV,WAAW;EAAA;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AACX,CAAC;AAACpB,EAAA,CApCIF,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAsCV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}